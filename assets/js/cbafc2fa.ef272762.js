"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[194],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,h=p["".concat(u,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},339:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={},i=void 0,l={unversionedId:"Machine Learning",id:"Machine Learning",title:"Machine Learning",description:"Tensorflow and PyTorch are two of the most popular deep learning frameworks.",source:"@site/docs/Machine Learning.md",sourceDirName:".",slug:"/Machine Learning",permalink:"/digital-garden/Machine Learning",draft:!1,tags:[],version:"current",lastUpdatedAt:1669305178,formattedLastUpdatedAt:"Nov 24, 2022",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"raspbery pi",permalink:"/digital-garden/DevOps/raspbery pi"},next:{title:"arduino",permalink:"/digital-garden/arduino"}},u={},s=[],c={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Tensorflow and PyTorch are two of the most popular deep learning frameworks."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://jax.readthedocs.io/en/latest/notebooks/quickstart.html"},"JAX")," is a new deep learning framework that uses GPU and TPU to accelerate computations."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},'"Gradient descent" is fancy math wording for "if you you want to find the bottom, go downhill".')),(0,a.kt)("p",null,'Machine learning is a kind of optimization...keep changing numbers in a function (possibly randomly, possibly in a structured way) to make some output number as good as you can get it. You\'re either trying to minimize or maximize the output number. That output number is how "good" the machine learning algorithm is. Frequently it will be the error rate for some decision problem...you want to minimize the error rate (make as few mistakes as possible).\nGradient is a math operator that takes in a bunch of numbers and spits out a vector that points in the direction the numbers increase fastest. That\'s mathematically the "most uphill" direction. If you go ',(0,a.kt)("em",{parentName:"p"},"opposite")," that, you're going downhill...that's gradient descent. Run a bunch of versions of your machine learning algorithm, so you get a bunch of output numbers. Figure out the gradient of those output numbers. Then go the opposite direction...that will tend to be towards the minimum output value. Then do that over and over again until you can't get the output number any smaller. You've found the \"local minimum\"...anywhere you go from there is \"up\".\nThis may or may not be the \"global mimimum\", the best possible value you can find...this is analogous to standing in a valley and going downhill until you hit the stream at the bottom, but there's a valley next door that's even deeper. You'd have to have started ",(0,a.kt)("em",{parentName:"p"},"in that other valley")," to find that minimum. Finding local minima is relatively easy, finding global minima (and proving they're global) is difficult. Hence we find the local and, if it's good enough (particularly common in machine learning), we call that good."))}p.isMDXComponent=!0}}]);